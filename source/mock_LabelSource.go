// Code generated by mockery v2.32.0. DO NOT EDIT.

package source

import mock "github.com/stretchr/testify/mock"

// MockLabelSource is an autogenerated mock type for the LabelSource type
type MockLabelSource struct {
	mock.Mock
}

// GetLabels provides a mock function with given fields:
func (_m *MockLabelSource) GetLabels() (FeatureLabels, error) {
	ret := _m.Called()

	var r0 FeatureLabels
	var r1 error
	if rf, ok := ret.Get(0).(func() (FeatureLabels, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() FeatureLabels); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(FeatureLabels)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *MockLabelSource) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Priority provides a mock function with given fields:
func (_m *MockLabelSource) Priority() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewMockLabelSource creates a new instance of MockLabelSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLabelSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLabelSource {
	mock := &MockLabelSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
